https://learn.javascript.ru/dom-nodes#primer-dom
Зміст 
Браузерне оточення, специфікації
DOM-дерево
Навігація по DOM
Пошук: getElement, querySelector

--------------------------------------------
Браузерне оточення, специфікації =>> УРОК 1
--------------------------------------------
    Мова програмування JavaScript спочатку була створена для веббраузерів. Платформою може бути браузер, або вебсервер(Node.js забезпечує функції сервера) або інший хост.Тобто платформа,це функціональність тоді це - середовище.Середовище надає власні об’єкти та додаткові функції до базової мови.
    

                        що ми маємо, коли JS працює в веббраузері
                                            window 
     1.document(DOM)   2.BOM(navigator,screen,location,frames,history,XMLHttpRequests) 3.JS(Object,Array,Function)

Існує “корінний” об’єкт, що називається window. Він має дві ролі:
По-перше, це глобальний об’єкт,який містить змінні, які мають бути доступними скрізь.
По-друге, він являє собою “вікно браузера” та надає способи для керування ним.
--------------------------
Document Object Model =>>
--------------------------
Document Object Model – HTML документ представляє весь контент сторінки у вигляді дерева як об’єкти, де кожен тег являється вузлом-елементом,ці елементи створюють ієрархічну структуру, де кожен елемент може мати батьківський, дочірній та сусідні елементи.

об’єкт document – це головна “точка входу” до сторінки. Ми можемо взаємодіяти з сторінкою використовуючи цей об’єкт.

(i) - DOM – не лише для браузерів існують також,але й наприклад для скриптів  сервера, які завантажують HTML-сторінку.
-------------------------------
BOM (Browser Object Model) =>>
-------------------------------
Browser Object Model – це додаткові об’єкти, надані браузером (хост-середовищем) для роботи з усім, крім документа.(наприклад navigator.userAgent,navigator.platform,location,також функції alert,confirm,prompt)
--------------------
DOM-дерево =>>УРОК 2
--------------------
document.body - це об'єкт для тега <body>.

Коли ми в консолі нажимаємо на теги html,head,body - це є вузли-елементи і їх діти будуть скриватися і розкриватися.

1.Текст усередині елементів утворює текстові вузли, що позначені як #text.
Наприклад, у тезі <title> є текстовий вузол.
Пробіли і перенос вони теж формують текстовий вузол.
--------------------
Автовиправлення =>>
--------------------
Якщо браузер стикається з некоректно написаним HTML-кодом, він автоматично коригує його під час побудови DOM.
!!Таблиці завжди містять <tbody>
<table id="table"><tr><td>1</td></tr></table> => <tbody> - браузер сам добавляє

--------------------
Інші типи вузлів =>>
--------------------
Є й інші типи вузлів, крім елементів і текстових вузлів це коментар(#comment)
Навіть директива <!DOCTYPE...>, яку ми ставимо на початку HTML, також є DOM-вузлом.
Навіть об'єкт document, який представляє весь документ, формально є DOM-вузлом.

Існує 12 типів вузлів. Але на практиці ми в основному працюємо з 4 з них:

/документ\ – «вхідна точка» в DOM.
/вузли-елементи\ – HTML-теги, основні будівельні блоки.
/текстові вузли\ – містять текст.
/коментарі\ – іноді в них можна включити інформацію, яка не буде показана, але доступна в DOM для читання JS.
---------------------------
Навігація по DOM =>> УРОК 3
---------------------------
Усі операції з DOM починаються з об’єкта document. Це головна “точка входу” в DOM. З нього ми можемо отримати доступ до будь-якого вузла.
--------------------------------------------------------------------
Навігація по вузлам,нащаткам,сусідам
--------------------------------------------------------------------
1.Батьківський вузол доступний як parentNode.

2.Дочірні вузли – елементи, які вкладені у батьківський вузол.

3.Нащадки – всі ЕЛЕМЕНТИ, які вкладені у ВУЗОЛ, включаючи дітей, їхніх дітей.

4.Сусідні вузли – це дочірні вузли їх може бути декілька, які є НАЩАТКАМИ одного батька.

Приклад 1:
<div class="wrapper">
  <h1>Заголовок</h1>
  <ul class="list">
    <li>Перший пункт</li>
    <li>Другий пункт</li>
    <li>Третій пункт</li>
  </ul>
  <p>Підсумок</p>
</div>
Всього вузлів: 5 - <div>, <h1>, <ul>, <li>, <p>.
Дочірні вузли <div class="wrapper">: <h1>, <ul>, <p>.
Сусідні вузли <div class="wrapper">: відсутні, оскільки <div class="wrapper"> єдиний дочірній вузол відповідного рівня ієрархії DOM.
Наслідуючі(нащадки) вузли <div class="wrapper">: <h1>, <ul>, <li> (три елементи), <p>.

childNodes  – спеціальний ітеративний об’єкт-псевдомасив.
(i) - Колекції DOM доступні лише для зчитування
(i) - DOM колекції живі
(i) - не використовуйте for..in для перебору колекцій, for of

--------------------------------------------
Пошук: getElement, querySelector =>> УРОК 4
--------------------------------------------
1.elem.querySelector(css) повертає перший елемент, що відповідає даному CSS-селектору
document.querySelector('#age-table td') document.querySelector('form[name="search"]')
2.document.getElementById(id) - <div id="elem-content">Елемент</div>//містить дефіс(не можна) =>  але так можна window['elem-content']
3.elem.querySelectorAll(css), який повертає всі елементи всередині elem(має статичну колекцію,як фіксований масив,а старі методи пошуки видають живу колекцію)
document.querySelectorAll('#age-table label') клас #age-table > label
4.elem.matches(css) нічого не шукає, він просто перевіряє, чи відповідає elem заданому CSS-селектору. Він повертає true або false.
5.closest шукає предка і повертається знайдений предок.
-----------------------------------------------
Властивості вузлів: тип, тег та вміст =>УРОК 5
--------------------------------------------
----------------
Класи DOM вузлів
----------------
 вузли DOM є звичайними об’єктами JavaScript. Вони використовують прототипні класи для успадкування.
console.dir(document.body) виведе інформацію про властивості та методи об'єкта.//HTMLElement.prototype, Element.prototype і так далі.
Кожен вузол належить відповідному вбудованому класу.

Коренем ієрархії є EventTarget, від нього успадковується Node, а інші вузли DOM успадкують вже від нього.

На наведеному нижче рисунку показані основні класи:

1."EventTarget" – це кореневий-абстрактний клас для всього,він підтримує “події” на всіх вузлах

2."Node" –  абстрактний-базовий клас для вузлів DOM.Він надає: parentNode, nextSibling, childNodes   

3.класс "Document" - Глобальний об’єкт document належить саме до цього класу. Він служить точкою входу в DOM

4."CharacterData" - абстрактний клас, успадковується: 1.Text(всередині елементів) 2.Comment - скриті від користувача

5."Element" – базовий клас для елементів DOM.Він надає навігаційні можливості на рівні елементів, такі як:nextElementSibling, children та методи пошуку, такі як getElementsByTagName, querySelector.

6."HTMLElement" – це базовий клас для всіх HTML-елементів. Ми будемо працювати з ним більшість часу.
Він успадковується класами конкретних HTML-елементів:HTMLInputElement – клас для елементів <input>

Теги з власними класами, мають властивості та методи,є також,які не мають- <span>, <section>, <article> , вони є екземплярами класу "HTMLElement".!!!
Таким чином, повний набір властивостей та методів для певного вузла формується в результаті ланцюжка успадкування.

Наприклад, давайте розглянемо об’єкт DOM для елемента <input>.Нижче наведені класи:
Він отримує ВЛАСТИВОСТІ та МЕТОДИ шляхом “накладання” наступних класів (подані в порядку успадкування):
HTMLInputElement – цей клас надає ВЛАСТИВОСТІ для елемента введення,
HTMLElement – надає  МЕТОДИ для HTML-елементів (такі як отримання та встановлення значень),
Element – надає загальні МЕТОДИ для елементів,
Node – надає загальні ВЛАСТИВОСТІ для вузлів DOM,
EventTarget – цей клас забезпечує підтримку подій  і цей клас успадковується від Object, тому він має доступ до загальних МЕТОДІВ “простого об’єкту”, наприклад, hasOwnProperty.

Щоб визначити ім’я класу вузла DOM,можемо скористатись у об’єкта ВЛАСТИВІСТЮ constructor.!!! Він посилається на конструктор класу, і constructor.name є його ім’ям:
alert(document.body.constructor.name); // HTMLBodyElement
alert(document.body); // [object HTMLBodyElement]

instanceof - перевіряє наслідування boolean:
alert(document.body instanceof HTMLBodyElement)
--------------------------------------------
Властивість “nodeType” - визначає тип вузла 
--------------------------------------------
nodeType має числове значення:
elem.nodeType == 1 для вузлів-елементів,console.log(document.body.nodeType)//1
3 для текстових вузлів,9 для об’єкта документа
------------------------
Тег: nodeName та tagName
------------------------
Для визначення імені тегу ми можемо скористатися властивостями nodeName або tagName.

alert( document.body.nodeName ); // BODY
alert( document.body.tagName ); // BODY

tagName підтримується лише вузлами елементів,адже походить від класу Element, тоді як nodeName може сказати щось про інші типи вузлів.

Для прикладу, порівняємо tagName і nodeName для вузла document та коментаря:

<body><!-- коментар -->

  <script>
    // для коментаря
    alert( document.body.firstChild.tagName ); // undefined (це не елемент)
    alert( document.body.firstChild.nodeName ); // #comment

    // для документу
    alert( document.tagName ); // undefined (це не елемент)
    alert( document.nodeName ); // #document
  </script>
</body>

Якщо ми маємо справу лише з елементами, то ми можемо використовувати як tagName, так і nodeName – немає ніякої різниці.
-----------------
innerHTML: вміст
-----------------
Властивість innerHTML дозволяє отримати HTML всередині елемента як рядок.Ми також можемо змінювати його. 

(i) - Скрипти не виконуються
(i) - “innerHTML+=” повністю перезаписує вміст

Оскільки вміст “обнуляється” і перезаписується з нуля, всі зображення та інші ресурси будуть перезавантажені.
-------------------------------
outerHTML: повний HTML елемента
-------------------------------
Властивість outerHTML містить повний HTML елемента. Це як innerHTML, але включає сам елемент.
    <div id="elem">Привіт <b>Світ</b></div>

    <script>
    alert(elem.outerHTML); // <div id="elem">Привіт <b>Світ</b></div>
    </script>

(i) - відміну від innerHTML, запис у outerHTML не змінює елемент. Замість цього він замінює його в DOM.
----------------------------------`
data: вміст тексту вузла
----------------------------------
Властивість innerHTML існує лише для вузлів-елементів.
Інші типи вузлів, такі як текстові вузли, мають:data властивості. 
<body>
  Привіт
  <!-- Коментар -->
  <script>
    let text = document.body.firstChild;
    alert(text.data); // Привіт

    let comment = text.nextSibling;
    alert(comment.data); // Коментар
  </script>
</body>
--------------------------
textContent: чистий текст
--------------------------
Властивість textContent надає доступ до тексту всередині елемента: лише текст, без усіх <тегів>.
<div id="news">
  <h1>Заголовок!</h1>
  <p>Марсіанці нападають на людей!</p>
</div>
<script>
  // Заголовок! Марсіанці нападають на людей!
  alert(news.textContent);
</script>
Як ми бачимо, повертається лише текст, як ніби всі <теги> були вирізані, але текст залишився.

Різниця між innerHTML та textContent:
 -За допомогою innerHTML він буде вставлений “як HTML”, з усіма HTML-тегами.
 -За допомогою textContent він буде вставлений “як текст”, всі символи будуть трактуватися буквально.

 <div id="elem1"></div>
 <div id="elem2"></div>

<script>
  let name = prompt("Як вас звати?", "<b>Вінні Пух!</b>");

  elem1.innerHTML = name;
  elem2.textContent = name;
</script>
Перший <div> отримує назву “як HTML”: всі теги стають тегами, тому ми бачимо назву жирним шрифтом.//Вінні Пух!
Другий <div> отримує назву “як текст”, тому ми буквально бачимо <b>Вінні Пух!</b>.//<b>Вінні Пух!</b>

--------------------
Властивість “hidden”
--------------------
Атрибут “hidden” та властивість DOM визначає видно елемент чи ні.
Технічно, hidden працює так само, як style="display:none". Але це коротше писати.
<div id="elem">Блимаючий елемент</div>
setInterval(() => elem.hidden = !elem.hidden, 1000);
-------------------
Більше властивостей
-------------------
Елементи DOM також мають додаткові властивості, зокрема, ті, які залежать від класу:
value – значення для <input>, <select> та <textarea> (HTMLInputElement, HTMLSelectElement…).
href – адрес посилання “href” для <a href="..."> (HTMLAnchorElement).
id – значення атрибуту “id” для всіх елементів (HTMLElement).

<input type="text" id="elem" value="value">

    <script>
    alert(elem.type); // "text"
    alert(elem.id); // "elem"
    alert(elem.value); // значення
    </script>



