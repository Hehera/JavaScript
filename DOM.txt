https://learn.javascript.ru/dom-nodes#primer-dom
--------------------------------------
Браузерне оточення, специфікації =>>
--------------------------------------
Мова програмування JavaScript спочатку була створена для веббраузерів. Платформою може бути браузер, або вебсервер або інший хост, навіть “розумна” кавоварка, якщо вона може запустити JavaScript.Якщо є така платформа,тобто функціональність тоді це - середовище.Середовище надає власні об’єкти та додаткові функції до базової мови. Веббраузери дають засоби для керування вебсторінками. Node.js забезпечує функції сервера тощо.

На рисунку нижче показано в загальних рисах те, що ми маємо, коли JavaScript працює в веббраузері
                                            window 
              1.document(DOM)   2.BOM(navigator,screen,location,frames,history,XMLHttpRequests) 3.JS(Object,Array,Function)

Існує “корінний” об’єкт, що називається window. Він має дві ролі:

По-перше, це глобальний об’єкт для коду JavaScript, як описано в розділі Глобальний об’єкт(!!!вернемся).
По-друге, він являє собою “вікно браузера” та надає способи для керування ним.

До всіх властивостей глобального об’єкта можна отримати доступ напряму:
Приклад 1
function sayHi() {
alert("Привіт");
}
// глобальні функції є методами глобального об’єкта:
window.sayHi();
приклад 2 alert(window.innerHeight); // внутрішня висота вікна
--------------------------
Document Object Model =>>
--------------------------
Document Object Model – представляє весь контент сторінки як об’єкти, які можуть бути змінені.

Об’єкт document – це головна “точка входу” до сторінки. Ми можемо змінити або створити що-небудь на сторінці, використовуючи цей об’єкт.

Приклад 1
// змінити колір фону на червоний
document.body.style.background = "red";

// повернути його назад після 1 секунди
setTimeout(() => document.body.style.background = "", 1000);

(i) - DOM – не лише для браузерів
Специфікація DOM описує структуру документа та надає об’єкти, щоб керувати ним. Є також інші інструменти окрім браузерів, які також використовують DOM.

Наприклад, скрипти сервера, які завантажують HTML-сторінки та обробляють їх також можуть використовувати DOM.
-------------------------------
BOM (Browser Object Model) =>>
-------------------------------
Browser Object Model – це додаткові об’єкти, надані браузером (хост-середовищем) для роботи з усім, крім документа.

Наприклад:

- Об’єкт navigator забезпечує інформацію про браузер та операційну систему: navigator.userAgent – інформація про поточний браузер, та navigator.platform – про платформу (може допомогти визначити на якій платформі відкрито браузер – Windows/Linux/Mac тощо).. 
- Об’єкт location дозволяє нам прочитати поточну URL-адресу і може перенаправити веббраузер на нову адресу.

Ось як ми можемо використовувати об’єкт location:

alert(location.href); // показує поточний URL-адрес
if (confirm("Перейти на сайт Wikipedia?")) {
  location.href = "https://wikipedia.org"; // перенаправляє браузер на іншу URL-адресу
}

Функції alert/confirm/prompt також є частиною BOM: вони безпосередньо не пов’язані з документом, але являють собою чисті методи взаємодії з користувачем.

Щоб переглянути структуру DOM у реальному часі, спробуйте  Live DOM Viewer.
--------------------
DOM-дерево =>>УРОК 2
--------------------
HTML-документ складається з тегів,представлені як об'єкти.Вкладені теги вважаються "дітьми" батьківського елемента. 
Текст всередині тега також є об'єктом.Наприклад, document.body - це об'єкт для тега <body>.

Приклад дерева
<!DOCTYPE HTML>
<html>
<head>
  <title>О лосях</title>
</head>
<body>
  Правда о лосях.
</body>
</html>


Коли ми в консолі нажимаємо на теги html,head,body - це є вузли-елементи і їх діти будуть скриватися і розкриватися.

1.Текст усередині елементів утворює текстові вузли, що позначені як #text.
Наприклад, у тезі <title> є текстовий вузол "Про лося".
Пробіли і перенос вони теж формують текстовий вузол.

--------------------
Автовиправлення =>>
--------------------
Якщо браузер стикається з некоректно написаним HTML-кодом, він автоматично коригує його під час побудови DOM(добавляє щось,якщо було щось пропущено,синтаксис поправляє).
Якщо в html одне слово Привіт,то він сам добавить html - head - body -- #text

!!Таблиці завжди містять <tbody>

<table id="table"><tr><td>1</td></tr></table> => <tbody> - браузер сам добавляє

--------------------
Інші типи вузлів =>>
--------------------
Все, що є в HTML, навіть коментарі є частиною DOM.
Є й інші типи вузлів, крім елементів і текстових вузлів це коментар(#comment)
Навіть директива <!DOCTYPE...>, яку ми ставимо на початку HTML, також є DOM-вузлом.
Навіть об'єкт document, який представляє весь документ, формально є DOM-вузлом.

Існує 12 типів вузлів. Але на практиці ми в основному працюємо з 4 з них:

/документ\ – «вхідна точка» в DOM.
/вузли-елементи\ – HTML-теги, основні будівельні блоки.
/текстові вузли\ – містять текст.
/коментарі\ – іноді в них можна включити інформацію, яка не буде показана, але доступна в DOM для читання JS.

--------------------------
Експерементування DOM =>>
--------------------------
У правій частині інструментів розробника знаходяться такі підрозділи:
1.Styles – тут ми бачимо CSS, застосований до поточного елементу
2.Computed  - візуально бачим результат задання стилів
3.Event Listeners – у цьому розділі ми бачимо обробники подій, прив'язані до DOM-елементів

document.body - побачити розмітку body

-------------
Висновок =>>
-------------
HTML/XML документи представлені у браузері як DOM-дерева.

- Теги стають вузлами-елементами та формують структуру документа.
- Текст становится текстовыми вузлами.
… і т.д. Все, що записано в HTML, є і в DOM-дереві, навіть коментарі.

Для зміни елементів або перевірки DOM-дерева ми можемо використовувати інструменти розробника у браузері.
У DOM-вузлів є властивості та методи, які дозволяють вибирати будь-який з елементів, змінювати, переміщувати їх на сторінці та багато іншого. Ми повернемось до них у наступних розділах.

---------------------
Навігація по DOM =>>
---------------------


