Існує два основних набори:
Для всіх вузлів: parentNode, childNodes, firstChild, lastChild, previousSibling, nextSibling.
Для елементів: parentElement, children, firstElementChild, lastElementChild, previousElementSibling, nextElementSibling.

firstChild і lastChild надають швидкий доступ до першого та останнього дочірнього вузла.
elem.hasChildNodes(), що перевіряє, чи є взагалі дочірні вузли
Наступний сусід - nextSibling,попередній – у previousSibling.

firstElementChild, lastElementChild – перший і останній дочірні елементи.
previousElementSibling, nextElementSibling – сусідні елементи.
---------
EXAMPLE
---------
Приклад 2:
// батьком <body> є <html>
alert( document.body.parentNode === document.documentElement ); // true

// після <head> іде <body>
alert( document.head.nextSibling ); // HTMLBodyElement

// після <body> іде <head>
alert( document.body.previousSibling ); // HTMLHeadElement

Найвищі вузли дерева доступні безпосередньо як властивості document:
1.<html> = document.documentElement - найвищий вузол документа 
2<body> – document.body.
3.<head> доступний як document.head.

Колекція childNodes містить список усіх дочірніх вузлів, включаючи текстові вузли.

 <script>
    for (let i = 0; i < document.body.childNodes.length; i++) {
      console.log(document.body.childNodes[i]); // Text, DIV, Text, UL, ..., SCRIPT
    }
  </script>
-----------
Question--
-----------
Чи правда що elem.lastChild.nextSibling завжди null?
Так, це правда. Елемент elem.lastChild завжди останній, у нього немає nextSibling.

Чи правда що elem.children[0].previousSibling завжди null?
Ні, це неправда, тому що elem.children[0] — перший дочірній серед елементів. Але перед ним можуть існувати вузли інших типів. Отже, previousSibling може бути, наприклад, текстовим вузлом.

Чому parentElement? Чи може батько бути не елементом?
parentElement повертає батьківський елемент “element”, тоді як parentNode повертає батьківський “будь-який вузол”.
За винятком document.documentElement:
alert( document.documentElement.parentNode ); // document
alert( document.documentElement.parentElement ); // null

--------------
УРОК 4 EXAMPLE
--------------
4.1 matches

<div class="content__table">
<ul class="star-list">
    <li class="star">Про сіріус</li>
    <li class="star">Про альдебаран</li>
    <li class="contact">Зворотній зв'язок</li>
</ul>
</div>

let list = document.querySelectorAll('ul.star-list > li')
for (item of list) {
    Якщо li з класом star співпадає - виводить цю розмітку
    if (item.matches('li.star')) console.log(item.outerHTML)
}

4.2 closest
<h1>Зміст</h1>
<div class="contents">
  <ul class="book">
    <li class="chapter">Розділ 1</li>
    <li class="chapter">Розділ 2</li>
  </ul>
</div>
4.3 contains - Якщо elemA містить elemB повертає boolean
    <div id="parent-element">
    <p id="my-element">Це є нащадок</p>
    </div>
    const element = document.getElementById("my-element");
    const parent = document.getElementById("parent-element");
    console.log(parent.contains(element)); // true



/*Коли говорять, що один об'єкт успадковується від іншого в контексті програмування, це означає, що він отримує всі властивості і методи свого батька (або батьків) та може використовувати їх.

У вашому прикладі, коли кажуть, що Node успадковується від EventTarget, це означає, що Node має всі властивості і методи, які є у EventTarget, а також може використовувати їх.

Крім того, коли говорять, що інші вузли DOM успадковують вже від Node, це означає, що ці вузли DOM також отримують всі властивості і методи, які є у Node, а також можуть використовувати їх.*/

/*Властивості та методи - це дві основні концепції об'єктно-орієнтованого програмування. Ось їх основні відмінності:!!!

Сутність:

Властивість: це характеристика об'єкта, яка визначає його стан або дані.
Метод: це функція або процедура, яка описує дії, які об'єкт може виконати.
Доступ:

Властивість: забезпечує доступ до даних об'єкта.
Метод: забезпечує доступ до поведінки об'єкта.
Використання:

Властивість: використовується для доступу до стану об'єкта або його даних.
Метод: використовується для виконання певних операцій над об'єктом або його даними.
Приклад:

Припустимо, у вас є клас "Автомобіль". У цього класу можуть бути властивості, такі як "марка", "модель", "рік випуску", які описують його стан. А методи цього класу можуть включати "запустити двигун", "зупинитися", "збільшити швидкість".*/


/*Гетери (getters) - це методи, які використовуються для отримання значень ВСТАСТИВОСТЕЙ об'єкта.*/
