--------------------------------------------
Браузерне оточення, специфікації =>> УРОК 1
--------------------------------------------
Говорячи про стандарти, ми маємо:
Специфікацію DOM - Описує структуру документа, маніпуляції та події.
Специфікацію CSSOM - Описує таблиці стилів і правила стилів, маніпуляції з ними і їх зв’язування з документами.
Специфікацію HTML - Описує мову HTML (наприклад, теги), а також BOM (модель об’єкта браузера) – різні функції браузера: setTimeout, alert, location,prompt,confirm.

                        що ми маємо, коли JS працює в веббраузері
                                            window 
     1.document(DOM)   2.BOM(navigator,screen,location) 3.JS(Object,Array,Function)

Існує “корінний” об’єкт, що називається window. Він має дві ролі:
По-перше, це глобальний об’єкт,який містить змінні, які мають бути доступними скрізь.
По-друге, він являє собою “вікно браузера” та надає способи для керування ним.
--------------------------
Document Object Model =>>
--------------------------
Document Object Model – HTML документ представляє весь контент сторінки у вигляді дерева як об’єкти, де кожен тег являється вузлом-елементом,ці елементи створюють ієрархічну структуру, де кожен елемент може мати батьківський, дочірній та сусідні елементи.

об’єкт document – це головна “точка входу” до сторінки. Ми можемо взаємодіяти з сторінкою використовуючи цей об’єкт.

(i) - DOM – не лише для браузерів існують також,але й наприклад для скриптів  сервера, які завантажують HTML-сторінку.
-------------------------------
BOM (Browser Object Model) =>>
-------------------------------
Browser Object Model – це додаткові об’єкти і функції, надані браузером , окрім документа.(наприклад navigator.userAgent,navigator.platform,location,також функції alert,confirm,prompt)
----------------------
DOM-дерево =>>УРОК 2
----------------------
html,head,body - це є вузли-елементи.
--------------------
Інші типи вузлів =>>
--------------------
Існує 12 типів вузлів. Але на практиці ми в основному працюємо з 4 з них:
/документ\ – «вхідна точка» в DOM.
/вузли-елементи\ – HTML-теги, основні будівельні блоки.
/текстові вузли\ – містять текст.
/коментарі\ – іноді в них можна включити інформацію, яка не буде показана, але доступна в DOM для читання JS.
---------------------------
Навігація по DOM =>> УРОК 3
---------------------------
Усі операції з DOM починаються з об’єкта document.З нього ми можемо отримати доступ до будь-якого вузла.
--------------------------------------------------------------------
Навігація по вузлам,нащаткам,сусідам
--------------------------------------------------------------------
1.Батьківський вузол доступний як parentNode.

2.Дочірні вузли – елементи, які вкладені у батьківський вузол. childNodes, firstChild, lastChild

3.Нащадки – всі ЕЛЕМЕНТИ, які вкладені у ВУЗОЛ, включаючи дітей, їхніх дітей.

4.Сусідні вузли – це дочірні вузли їх може бути декілька, які є НАЩАТКАМИ одного батька.

--------------------------------------------
Пошук: getElement, querySelector =>> УРОК 4
--------------------------------------------
1.elem.querySelector(css) повертає перший елемент, що відповідає даному CSS-селектору
document.querySelector('#age-table td') 
Пошук по атрибуту:
let elementsWithIdAttribute = document.querySelectorAll('[id]');
let specificElement = document.querySelector('input[id="myInput"]'); - знайти елемент <input>, який має атрибут 'id' зі значенням 'myInput'.

2.document.getElementById(id) - <div id="elem-content">Елемент</div>//містить дефіс(не можна) =>  але так можна window['elem-content']
3.elem.querySelectorAll(css), який повертає всі елементи всередині elem(має статичну колекцію,як фіксований масив,а старі методи пошуки видають живу колекцію)
document.querySelectorAll('#age-table label') клас #age-table > label
4.elem.matches(css) нічого не шукає, він просто перевіряє, чи відповідає elem заданому CSS-селектору. Він повертає true або false.
5.closest шукає предка і повертається знайдений предок.
-----------------------------------------------
Властивості вузлів: тег,тип та вміст(innerHTML) =>УРОК 5
-----------------------------------------------
----------------
Класи DOM вузлів
----------------
Вузли DOM є звичайними об’єктами JavaScript. Вони використовують прототипні класи для успадкування.
Кожен вузол належить відповідному вбудованому класу,всі класи вузлів утворюють єдину ієрархію.
Таким чином, повний набір властивостей та методів для певного вузла формується в результаті ланцюжка успадкування.

Коренем ієрархії є EventTarget, від нього успадковується Node, а інші вузли DOM успадкують вже від нього.

constructor - визначає ім’я класу вузла.
nodeType - визначає тип вузла має числове значення(1 - Вузол елемент,3 -текствовий вузол 9 - для об'єкта документа).
nodeName або tagName - імя тегу.

innerHTML,outerHTML,hidden,textContent -  властивості вузлів
value(<input>,<select>,<textarea>)
href(<a>)
--------------------------------
Атрибути та властивості УРОК =>6
--------------------------------

Коли браузер завантажує сторінку, він “читає” або “парсить” HTML і генерує DOM об’єкти з нього.
Для вузлів-елементів більшість стандартних атрибутів HTML автоматично стають властивостями об’єктів DOM.

Наприклад,тег <body id="page"> => body.id="page". 

Але представлення атрибутів через властивості не відбувається один до одного!

Властивості та методи DOM поводяться так само, як і звичайні об’єкти JavaScript.
(i) - Властивості DOM не завжди є рядками. Наприклад, властивість input.checked (для чекбоксів) має (boolean) тип даних
---------------
DOM властивості
---------------
Властивості - id,type,class в DOM.
Існують багато вбудованих властивостей DOM. Їх багато. Але технічно ніхто нас не обмежує, і якщо їх недостатньо, ми можемо додати власні.
Отже, властивості та методи DOM поводяться так само, як і звичайні об’єкти JavaScript
---------------
HTML атрибути
---------------
У HTML, теги можуть мати атрибути. Коли браузер аналізує HTML і створює DOM-об’єкти для тегів, він розпізнає стандартні атрибути та створює з них властивості DOM.

Всі атрибути доступні за допомогою наступних методів:

elem.hasAttribute(name) – перевіряє наявність атрибута.// input.setAttribute('Test',123)
elem.getAttribute(name) – отримує значення атрибута. //value.getAttribute('about') console.log(input.outerHTML)
elem.setAttribute(name, value) – встановлює значення атрибута. //el.setAttribute('Test',123)
elem.removeAttribute(name) – видаляє атрибут.
elem.attributes - це колекція об’єктів, які належать вбудованому класу Attr, і мають властивості name та value.
---------------------------------------
Синхронізація властивостей і атрибутів
---------------------------------------
Коли стандартний атрибут змінюється, відповідна властивість автоматично оновлюється і, за деякими винятками, ні.
------------------------------------------
Нестандартні атрибути,властивість dataset
------------------------------------------
Нестандартні атрибути використовуються:1. для передачі користувацьких даних з HTML до JavaScript 2.для “позначення” HTML-елементів для JavaScript.

Всі атрибути, які починаються з “data” зарезервовані для використання програмістами. Вони доступні у властивості dataset.

Наприклад, якщо elem має атрибут, що називається "data-about", то він доступний як elem.dataset.about.
Атрибути – це те, що написано в HTML.
Властивості – це те, що є в об’єктах DOM.


 